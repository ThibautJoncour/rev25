@page "/GlobalTrades"
@implements IDisposable
@inject IJSRuntime JsRuntime
@inject DatabaseService DatabaseService

<PageTitle>Global Trades</PageTitle>

<div class="container-fluid mt-3">
    <div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="instrument" class="form-label">Instrument</label>
                <input type="text" class="form-control" id="instrument" name="instrument">
            </div>
            <div class="col-md-6">
                <label for="portfolio" class="form-label">Portfolio</label>
                <input type="text" class="form-control" id="portfolio" name="portfolio">
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="product-type" class="form-label">Product Type</label>
                <input type="text" class="form-control" id="product-type" name="product-type">
            </div>
            <div class="col-md-4">
                <label for="trade-date-start" class="form-label">Trade date</label>
                <div class="input-group">
                    <input type="date" class="form-control" id="trade-date-start" name="trade-date-start">
                    <span class="input-group-text">to</span>
                    <input type="date" class="form-control" name="trade-date-end" id="trade-date-end">
                </div>
            </div>
            <div class="col-md-4">
                <label for="maturity-date" class="form-label">Maturity date</label>
                <div class="input-group">
                    <input type="date" class="form-control" id="maturity-date-start" name="maturity-date-start">
                    <span class="input-group-text">to</span>
                    <input type="date" name="maturity-date-end" id="maturity-date-end" class="form-control">
                </div>
            </div>
        </div>
        <div class="d-grid gap-2">
            <button class="btn btn-primary" id="launch-button" @onclick="HandleFetchClick">Launch</button>
        </div>
    </div>

    <div class="w-100 global-trades-table-container">
        <table id="global-trades-table">
            <thead>
            <tr>
                <th>Entity</th>
                <th>Portfolio</th>
                <th>Instrument</th>
                <th>Status</th>
                <th>User</th>
                <th>ARPSONRef</th>
                <th>OPERARef</th>
                <th>InputDate</th>
                <th>TimeInput</th>
                <th>ProductType</th>
                <th>Trader</th>
                <th>INTERNALRef</th>
                <th>Counterparty</th>
                <th>TradeDate</th>
                <th>ValueDate</th>
                <th>MaturityDate</th>
                <th>Direction</th>
                <th>Notional</th>
                <th>Ccy</th>
                <th>RateType</th>
                <th>RateOrSpread</th>
                <th>Frequency</th>
                <th>Basis</th>
                <th>Interests</th>
                <th>TIE</th>
                <th>ISIN</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Bundle</th>
            </tr>
            </thead>
            <tbody>
            @*Content of the table*@
            </tbody>
        </table>
    </div>
</div>

@code {
    private const string GetPortfoliosQuery = "SELECT DISTINCT Portfolio FROM trades";
    private const string GetInstrumentsQuery = "SELECT DISTINCT Instrument FROM trades";
    private const string GetProductTypesQuery = "SELECT DISTINCT ProductType FROM trades";
    private const string GetGlobalTradesQuery = "SELECT Entity, Portfolio, Instrument, Status, User, ARPSONRef, OPERARef, InputDate, TimeInput, ProductType, Trader, INTERNALRef, Counterparty, TradeDate, ValueDate, MaturityDate, Direction, Notional, Ccy, RateType, RateOrSpread, Frequency, Basis, Interests, TIE, ISIN, Quantity, Price, Bundle from trades";

    // Self-reference to the component
    private DotNetObjectReference<GlobalTrades>? _reference;

    class Option
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    /// <summary>
    /// Reference to the JavaScript module defined in GlobalTrades.razor.js
    /// </summary>
    private IJSObjectReference? _module;

    /// <summary>
    /// Convert dictionary values returned by the database service to an array of strings
    /// </summary>
    /// <param name="data">Data returned from the DatabaseService</param>
    /// <param name="key">Target column</param>
    /// <returns></returns>
    private static string[] GetStringValues(IEnumerable<Dictionary<string, object>> data, string key)
    {
        return data.Select(d => d[key].ToString() ?? "").ToArray();
    }

    /// <summary>
    /// Get an array of strings from the response of the distinct queries
    /// </summary>
    /// <param name="data">Data from distinct response</param>
    /// <param name="key">Target column name</param>
    /// <returns></returns>
    private static string[]? GetStringArray(List<Dictionary<string, object>> data, string key)
    {
        return data.Any() ? GetStringValues(data, key) : null;
    }

    /// <summary>
    /// Maps an array of strings into Option objects
    /// </summary>
    /// <param name="strings">Array of string with options</param>
    /// <returns>An array of options</returns>
    private static Option[]? StringsToOptions(string[]? strings)
    {
        return strings?.Select(s => new Option
        {
            Value = $"'{s}'",
            Text = s
        }).ToArray();
    }

    private void HandleFetchClick() =>
        _module!.InvokeVoidAsync("handleFetchClick", _reference);

    /// <summary>
    /// Queries the database for the distinct values of the columns Portfolio, Instrument, and ProductType
    /// </summary>
    private async Task LoadMultiselectOptions()
    {
        var portfolios = DatabaseService.GetData(GetPortfoliosQuery);
        var instruments = DatabaseService.GetData(GetInstrumentsQuery);
        var productTypes = DatabaseService.GetData(GetProductTypesQuery);

        var portfoliosArray = GetStringArray(portfolios, "Portfolio");
        var instrumentsArray = GetStringArray(instruments, "Instrument");
        var productArray = GetStringArray(productTypes, "ProductType");

        // At this point, we have module property defined
        await _module!.InvokeVoidAsync("initMultiSelect", new object?[]
        {
            StringsToOptions(portfoliosArray),
            StringsToOptions(instrumentsArray),
            StringsToOptions(productArray)
        });
    }

    [JSInvokable]
    public Task<List<string?[]>> LoadGlobalTrades(
        string[] instrumentsFilter,
        string[] portfolioFilters,
        string[] productTypeFilters,
        string? tradeDateStart,
        string? tradeDateEnd,
        string? maturityDateStart,
        string? maturityDateEnd
    )
    {
        var finalQuery = new string(GetGlobalTradesQuery);
        var whereConditions = new List<string>();

        if (instrumentsFilter.Any())
        {
            whereConditions.Add($"Instrument IN ({string.Join(",", instrumentsFilter)})");
        }

        if (portfolioFilters.Any())
        {
            whereConditions.Add($"Portfolio IN ({string.Join(",", portfolioFilters)})");
        }

        if (productTypeFilters.Any())
        {
            whereConditions.Add($"ProductType IN ({string.Join(",", productTypeFilters)})");
        }
        
        if (!string.IsNullOrEmpty(tradeDateStart) && !string.IsNullOrEmpty(tradeDateEnd))
        {
            whereConditions.Add($"TradeDate BETWEEN '{tradeDateStart}' AND '{tradeDateEnd}'");
        }
        
        if (!string.IsNullOrEmpty(maturityDateStart) && !string.IsNullOrEmpty(maturityDateEnd))
        {
            whereConditions.Add($"MaturityDate BETWEEN '{maturityDateStart}' AND '{maturityDateEnd}'");
        }

        if (whereConditions.Any())
        {
            finalQuery += $" WHERE {string.Join(" AND ", whereConditions)}";
        }

        var trades = DatabaseService.GetData(finalQuery);

        var listOfTrades = trades.Select(t => t.Values.Select(v => v.ToString()).ToArray()).ToList();

        return Task.FromResult(listOfTrades);
    }

    protected override void OnInitialized()
    {
        _reference = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Imports the JS module (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/GlobalTrades.razor.js");

            // Invoke code inside the module, specifically the init() function
            await _module.InvokeVoidAsync("init");

            // Loads multi-selection options
            await LoadMultiselectOptions();
        }
    }

    public void Dispose()
    {
        _reference?.Dispose();
        _module?.DisposeAsync();
    }

}